type Progress {
  id: ID!
  userID: String
  fullName: String
  progress: AWSJSON
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelProgressConnection {
  items: [Progress]!
  nextToken: String
}

input ModelProgressFilterInput {
  id: ModelIDInput
  userID: ModelStringInput
  fullName: ModelStringInput
  progress: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelProgressFilterInput]
  or: [ModelProgressFilterInput]
  not: ModelProgressFilterInput
}

type Query {
  getProgress(id: ID!): Progress
  listProgresses(filter: ModelProgressFilterInput, limit: Int, nextToken: String): ModelProgressConnection
}

input ModelProgressConditionInput {
  userID: ModelStringInput
  fullName: ModelStringInput
  progress: ModelStringInput
  and: [ModelProgressConditionInput]
  or: [ModelProgressConditionInput]
  not: ModelProgressConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateProgressInput {
  id: ID
  userID: String
  fullName: String
  progress: AWSJSON
}

input UpdateProgressInput {
  id: ID!
  userID: String
  fullName: String
  progress: AWSJSON
}

input DeleteProgressInput {
  id: ID!
}

type Mutation {
  createProgress(input: CreateProgressInput!, condition: ModelProgressConditionInput): Progress
  updateProgress(input: UpdateProgressInput!, condition: ModelProgressConditionInput): Progress
  deleteProgress(input: DeleteProgressInput!, condition: ModelProgressConditionInput): Progress
}

input ModelSubscriptionProgressFilterInput {
  id: ModelSubscriptionIDInput
  userID: ModelSubscriptionStringInput
  fullName: ModelSubscriptionStringInput
  progress: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionProgressFilterInput]
  or: [ModelSubscriptionProgressFilterInput]
}

type Subscription {
  onCreateProgress(filter: ModelSubscriptionProgressFilterInput): Progress @aws_subscribe(mutations: ["createProgress"])
  onUpdateProgress(filter: ModelSubscriptionProgressFilterInput): Progress @aws_subscribe(mutations: ["updateProgress"])
  onDeleteProgress(filter: ModelSubscriptionProgressFilterInput): Progress @aws_subscribe(mutations: ["deleteProgress"])
}
